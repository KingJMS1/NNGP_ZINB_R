[{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"document demonstrates use ZINB_NNGP function ZINB.GP package, implements Zero-Inflated Negative Binomial (ZINB) model Nearest Neighbor Gaussian Processes (NNGP) spatial-temporal data. package sourced GitHub: KingJMS1/NNGP_ZINB_R. simulate spatial temporal data, apply ZINB_NNGP function model .","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"loading-required-libraries","dir":"Articles","previous_headings":"","what":"Loading Required Libraries","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"Load necessary libraries demonstration.","code":"library(ZINB.GP) library(mvtnorm) library(Matrix) set.seed(123)    # For reproducibility"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"simulating-spatial-temporal-data","dir":"Articles","previous_headings":"","what":"Simulating Spatial-Temporal Data","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"simulate data spatial temporal components. Assume : n_locs: Number spatial locations n_times: Number time points X: Covariate matrix y: Response variable (counts excess zeros) coords: Spatial coordinates Vs, Vt: Spatial temporal variance components Ds, Dt: Spatial temporal distance matrices Step 1: Define Parameters t","code":"n_locs <- 10    # Number of spatial locations n_times <- 10   # Number of time points n <- n_locs * n_times  # Total number of observations M <- 3          # Number of nearest neighbors for NNGP nsim <- 400    # Number of MCMC simulations burn <- 200     # Burn-in period"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"step-2-simulate-spatial-coordinates","dir":"Articles","previous_headings":"","what":"Step 2: Simulate Spatial Coordinates","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"Generate random spatial coordinates 10x10 grid.","code":"coords <- cbind(runif(n_locs, 0, 10), runif(n_locs, 0, 10)) plot(coords, pch = 19, xlab = \"X\", ylab = \"Y\", main = \"Simulated Spatial Locations\")"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"step-3-simulate-covariates","dir":"Articles","previous_headings":"","what":"Step 3: Simulate Covariates","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"Create simple covariate matrix X intercept one predictor.","code":"X <- matrix(c(rep(1, n), rnorm(n)), ncol = 2) colnames(X) <- c(\"Intercept\", \"X1\") head(X) #>      Intercept         X1 #> [1,]         1  1.2240818 #> [2,]         1  0.3598138 #> [3,]         1  0.4007715 #> [4,]         1  0.1106827 #> [5,]         1 -0.5558411 #> [6,]         1  1.7869131"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"step-4-simulate-spatial-and-temporal-effects","dir":"Articles","previous_headings":"","what":"Step 4: Simulate Spatial and Temporal Effects","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"Simulate spatial temporal covariance matrices using exponential decay function.","code":"# Number of locations and time points n_locs <- 10    # spatial locations n_times <- 10   # time points n <- n_locs * n_times  # total observations  # Generate spatial coordinates for 10 locations coords <- cbind(runif(n_locs, 0, 10), runif(n_locs, 0, 10))  # Create a time vector (assuming evenly spaced time points) time_points <- seq(1, n_times)  # Expand spatial coordinates: repeat each spatial location for each time point # Not actually necessary for use of package, just for later analysis coords_st <- do.call(rbind, replicate(n_times, coords, simplify = FALSE)) # Create a time index for each observation time_index <- rep(time_points, each = n_locs)  # Recompute the full spatial distance matrix for all observations (100 x 100) Ds <- as.matrix(dist(coords))  # Compute the full temporal distance matrix for all observations (100 x 100) Dt <- as.matrix(dist(time_points))  # Create spatial and temporal design matrices, indicates which observations # correspond to which positions spatially and temporally Vs <- as.matrix(sparseMatrix(i = 1:n, j = rep(1:10, 10), x = rep(1, n))) Vt <- as.matrix(sparseMatrix(i = 1:n, j = time_index, x = rep(1, n)))  # Create spatial and temporal covariance matrices # Initialize kernel parameters cov_scale <- 0.5 dist_scale_space <- 0.3 dist_scale_time <- 2 # Spatial  Cs <- (cov_scale^2) * exp(-dist_scale_space * Ds) # Temporal Ct <- (cov_scale^2) * exp(-Dt / (dist_scale_time ^ 2))"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"step-5-simulate-response-variable","dir":"Articles","previous_headings":"","what":"Step 5: Simulate Response Variable","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"Generate ZINB response variable spatial-temporal effects.","code":"# Simulate latent spatial-temporal effects err <- 0.1 spatial_effect <- rmvnorm(n = 1, sigma = Cs + diag(err, 10)) temporal_effect <- rmvnorm(n = 1, sigma = Ct + diag(err, 10)) eta <- X %*% c(1, 0.5) + Vs %*% t(as.matrix(spatial_effect)) + Vt %*% t(as.matrix(temporal_effect))  # ZINB parameters phi <- 2  # Dispersion parameter pi <- plogis(-1 + 0.3 * X[, 2])  # Zero-inflation probability mu <- exp(eta)  # Mean of NB component  # Simulate ZINB data y <- numeric(n) for (i in 1:n) {   if (runif(1) < pi[i]) {     y[i] <- 0  # Zero-inflated part   } else {     y[i] <- rnbinom(1, size = phi, mu = mu[i])  # NB part   } }  # Expand coords for spatial-temporal grid coords_st <- expand.grid(x = coords[, 1], y = coords[, 2], t = time_points) coords_st <- as.matrix(coords_st[, 1:2])  # Only spatial coords for NNGP  # Summary of y summary(y) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    0.00    1.00    2.59    2.25   37.00 hist(y, breaks = 30, main = \"Histogram of Simulated ZINB Counts\")"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"running-zinb_nngp","dir":"Articles","previous_headings":"","what":"Running ZINB_NNGP","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"Now, apply ZINB_NNGP function simulated data.","code":"# Expanded coordinates for all observations (100 x 2) # (coords_st was already computed as the expanded grid)  # Now call the function with observation-level covariance matrices: output <- ZINB_NNGP(   X = X,               # 100 x 2   y = y,               # length 100   coords = coords,  # 100 x 2 expanded coordinates   Vs = Vs,         # 100 x 100 covariance matrix   Vt = Vt,         # 100 x 100 covariance matrix   Ds = Ds,         # 100 x 100 distance matrix   Dt = Dt,         # 100 x 100 distance matrix   M = M,   nsim = nsim,   burn = burn,   save_ypred = TRUE )"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"exploring-the-output","dir":"Articles","previous_headings":"","what":"Exploring the Output","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"Examine structure output summarize key results.","code":"# Structure of the output str(output) #> List of 25 #>  $ Alpha      : num [1:200, 1:2] 1.165 0.888 0.763 0.504 1.207 ... #>  $ Beta       : num [1:200, 1:2] 0.667 1.081 1.059 0.767 1.04 ... #>  $ A          : num [1:200, 1:10] -0.207 -0.976 -1.356 0.355 -0.354 ... #>  $ B          : num [1:200, 1:10] -0.0111 0.3948 0.2135 0.4825 -0.2447 ... #>  $ C          : num [1:200, 1:10] 0.484 -0.914 -0.962 -0.386 -0.522 ... #>  $ D          : num [1:200, 1:10] 0.695 -0.107 0.221 1.01 0.695 ... #>  $ Eps1s      : num [1:200, 1:10] -0.00662 -0.05734 -0.00578 0.04514 0.00533 ... #>  $ Eps2s      : num [1:200, 1:10] 0.0502 0.0548 0.0116 -0.0249 -0.0171 ... #>  $ Eps1t      : num [1:200, 1:10] -0.0182 0.0714 0.0446 0.0404 -0.0252 ... #>  $ Eps2t      : num [1:200, 1:10] 0.04938 0.00606 -0.01423 -0.09962 0.00753 ... #>  $ L1t        : num [1:200] 2.04 2.2 1.92 1.87 1.78 ... #>  $ Sigma1t    : num [1:200] 0.812 0.63 0.853 0.837 0.682 ... #>  $ L2t        : num [1:200] 0.689 0.82 1.049 1.049 1.134 ... #>  $ Sigma2t    : num [1:200] 0.879 0.554 0.726 0.852 0.675 ... #>  $ Phi_bin    : num [1:200] 12.8 12.7 12.8 12.4 12.8 ... #>  $ Sigma1s    : num [1:200] 0.925 0.947 1.262 0.814 0.664 ... #>  $ Phi_nb     : num [1:200] 11.05 11.78 10.83 9.71 11.7 ... #>  $ Sigma2s    : num [1:200] 0.908 0.581 0.951 0.55 0.665 ... #>  $ Sigma_eps1s: num [1:200] 0.031 0.032 0.0483 0.0407 0.0481 ... #>  $ Sigma_eps2s: num [1:200] 0.0421 0.0366 0.0394 0.0422 0.0315 ... #>  $ Sigma_eps1t: num [1:200] 0.0582 0.0537 0.0438 0.044 0.0304 ... #>  $ Sigma_eps2t: num [1:200] 0.0637 0.0783 0.0661 0.0572 0.0389 ... #>  $ R          : num [1:200] 1.022 1.011 1.002 1.006 0.988 ... #>  $ Y_pred     : num [1:200, 1:100] 26.41 0 4.32 9.83 7.88 ... #>  $ at_risk    : num [1:200, 1:100] 0 0 0 0 0 0 0 0 0 1 ...  # Summary of posterior means (example, adjust based on actual output structure) if (!is.null(output$Beta)) {   cat(\"Posterior means of beta:\\n\")   print(colMeans(output$Beta)) } #> Posterior means of beta: #> [1] 0.6664111 0.7218903  # Plot predicted vs observed values (if available) if (!is.null(output$Y_pred)) {   plot(y, colMeans(output$Y_pred), pch = 19,         xlab = \"Observed\", ylab = \"Predicted\",         main = \"Predicted vs Observed Counts\")   abline(0, 1, col = \"red\") }"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/HuangExplanation.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Demonstration of ZINB_NNGP with Simulated Spatial-Temporal Data","text":"demonstration showcased simulate spatial-temporal data fit ZINB model NNGP using ZINB_NNGP function. simulated data included spatial temporal effects, model accounted zero-inflation overdispersion. Users can extend example adjusting parameters, adding covariates, applying real data.","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/simulated_data.html","id":"using-zinb-gps-zinb_nngp-model","dir":"Articles","previous_headings":"","what":"Using ZINB.GP’s ZINB_NNGP model","title":"A Simple Simulation","text":"First, import package well dependencies use simulate dataset.","code":"library(mvtnorm) library(Matrix) library(ZINB.GP)"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/simulated_data.html","id":"generating-a-dataset","dir":"Articles","previous_headings":"Using ZINB.GP’s ZINB_NNGP model","what":"Generating a dataset","title":"A Simple Simulation","text":"go full process generate dataset attempt provide clarity various matrix parameters passed ZINB_NNGP .","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/simulated_data.html","id":"helper-functions","dir":"Articles","previous_headings":"Using ZINB.GP’s ZINB_NNGP model > Generating a dataset","what":"Helper functions","title":"A Simple Simulation","text":"First define helper functions. first create Vs Vt, spatial temporal design matrices. consit indicator variables indicating point space/time data points . Next, make functions generate spatial temporal random effects (varying intercepts) corresponding distance matrices.","code":"make_Vs_Vt <- function(num_spatial, num_temporal, avg_obs) {     n_time_points <- num_temporal # Number of temporal units     n_unit_mat <- matrix(rpois(num_spatial * n_time_points, avg_obs), nrow = num_spatial, byrow = TRUE) # sample around avg_obs observations per sampling unit (both space and time)      N <- sum(n_unit_mat)    # Total number of observations     id <- c()     for (i in seq_len(nrow(n_unit_mat))) {         id <- c(id, rep(i, sum(n_unit_mat[i, ])))     }      tp_seq <- c()     for (j in seq_len(ncol(n_unit_mat))) {         tp_seq <- c(tp_seq, rep(j, sum(n_unit_mat[, j])))     }      # spatial design matrix     Vs <- as.matrix(sparseMatrix(i = 1:N, j = id, x = rep(1, N)))      # temporal design matrix     Vt <- as.matrix(sparseMatrix(i = 1:N, j = tp_seq, x = rep(1, N)))      return(list(Vs = Vs, Vt = Vt, N = N)) } make_spatial_effects <- function(phi_nb, phi_bin, sigma_bin_s, sigma_nb_s, coords) {     ##########################     # Spatial Random Effects #     ##########################     Ds <- as.matrix(dist(coords))     Ks_bin <- sigma_bin_s^2 * exp(-phi_bin * Ds)     Ks_nb <- sigma_nb_s^2 * exp(-phi_nb * Ds)     a <- t(rmvnorm(n = 1, sigma = Ks_bin))     c <- t(rmvnorm(n = 1, sigma = Ks_nb))      return(list(a = a, c = c, Ds = Ds)) }  make_temporal_effects <- function(l1t, l2t, sigma1t, sigma2t, n_time_points) {     ###########################     # Temporal Random Effects #     ###########################     w <- matrix(1:n_time_points, ncol = 1)     Dt <- as.matrix(dist(w))          Kt_bin <- sigma1t^2 * exp(-Dt / (l1t^2))     Kt_nb <- sigma2t^2 * exp(-Dt / (l2t^2))          b <- t(rmvnorm(n = 1, sigma = Kt_bin))     d <- t(rmvnorm(n = 1, sigma = Kt_nb))          return(list(b = b, d = d, Dt = Dt)) }"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/simulated_data.html","id":"actually-generating-the-data","dir":"Articles","previous_headings":"Using ZINB.GP’s ZINB_NNGP model > Generating a dataset","what":"Actually Generating the Data","title":"A Simple Simulation","text":"Now ready generate dataset. First define number spatial temporal points using. , create spatial temporal design matrices. , generate spatial coordinates, main predictors interest X. Next, create spatial temporal distance matrices, spatial temporal random effects. define fixed effects (coefficients X) logistic regression negative binomial models. , generate spatial temporal noise terms added mix Finally, can create models. First simulate whether risk group traditional logistic regression setting: , -risk group, draw value point negative binomial distribution, GLM setting logit link.","code":"num_spatial <- 30 num_temporal <- 10 # Get Spatial and temporal design matrices, and total number of observations out <- make_Vs_Vt(num_spatial, num_temporal, 2) Vs <- out$Vs Vt <- out$Vt N  <- out$N     # Total number of observations coords <- cbind(runif(num_spatial), runif(num_spatial)) x <- rnorm(N, 0, 1) X <- as.matrix(x) # Design matrix, can add additional covariates (e.g., race, age, gender) X <- cbind(1, X) p <- ncol(X) phi_nb <- 1 phi_bin <- 2        # Spatial Kernel length scale for Gaussian processes in the logistic regression and negative binomial parts of the model sigma_bin_s <- 1     sigma_nb_s <- 1     # Overall spatial kernel Scale for GPs out <- make_spatial_effects(phi_nb, phi_bin, sigma_bin_s, sigma_nb_s, coords) a <- out$a c <- out$c          # Spatial random effects Ds <- out$Ds        # Spatial Distance matrix  l1t <- 2 l2t <- 3            # Temporal Kernel length scale sigma1t <- 0.5 sigma2t <- 0.5      # Overall temporal kernel scale for GPs out <- make_temporal_effects(l1t, l2t, sigma1t, sigma2t, num_temporal) b <- out$b d <- out$d          # Temporal random effects Dt <- out$Dt        # Temporal distance matrix # LR Part alpha <- c(-0.25, 0.25)  # NB Part beta <- c(.5, -.25) sigma_eps1s <- sigma_eps2s <- 0.05 eps1s <- t(rmvnorm(n = 1, sigma = diag(sigma_eps1s^2, nrow = num_spatial))) eps2s <- t(rmvnorm(n = 1, sigma = diag(sigma_eps2s^2, nrow = num_spatial)))  sigma_eps1t <- sigma_eps2t <- 0.05 eps1t <- t(rmvnorm(n = 1, sigma = diag(sigma_eps1t^2, nrow = num_temporal))) eps2t <- t(rmvnorm(n = 1, sigma = diag(sigma_eps2t^2, nrow = num_temporal))) phi1 <- Vs %*% a + Vt %*% b eta1 <- X %*% alpha + phi1 + Vs %*% eps1s + Vt %*% eps1t  p_at_risk <- exp(eta1) / (1 + exp(eta1)) # 1-pr(\"structural zero\") u <- rbinom(N, 1, p_at_risk[, 1]) # at-risk indicator phi3 <- Vs %*% c + Vt %*% d eta2 <- X[u == 1, ] %*% beta + phi3[u == 1, ] + Vs[u == 1, ] %*% eps2s + Vt[u == 1, ] %*% eps2t # Linear predictor for count part N1 <- sum(u == 1)  r <- 1 # NB dispersion psi <- exp(eta2) / (1 + exp(eta2)) # Prob of success  mu <- r * psi / (1 - psi) # NB mean y <- rep(0, N) # Response y[u == 1] <- rnbinom(N1, r, mu = mu[, 1]) # If at risk, draw from NB"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/articles/simulated_data.html","id":"running-the-model-on-the-generated-dataset","dir":"Articles","previous_headings":"Using ZINB.GP’s ZINB_NNGP model","what":"Running the model on the generated dataset","title":"A Simple Simulation","text":"Now ready run model. done follows: can investigate output desired, example, create 90% CIs alpha beta, investigate often samples selected risk. Looking 90% CIs coefficients -risk LR model:  Looking 90% CIs coefficients NB model:  Viewing frequency samples risk:","code":"# Run for a short time for demo purposes output <- ZINB_NNGP(X, y, coords, Vs, Vt, Ds, Dt, M = 10, 200, 100, 1, TRUE) predictions <- output$Y_pred sim_alpha <- output$Alpha sim_beta <- output$Beta alpha #> [1] -0.25  0.25 aCIs <- apply(sim_alpha, 2, function(x) quantile(x, probs=c(0.05, 0.95))) boxplot(aCIs, main = \"CIs for Alpha\") beta #> [1]  0.50 -0.25 bCIs <- apply(sim_beta, 2, function(x) quantile(x, probs=c(0.05, 0.95))) boxplot(bCIs, main = \"CIs for Beta\") # Examine how often various samples are at risk at_risk <- output$at_risk sim_p_at_risk <- apply(at_risk, 2, mean) sim_p_at_risk[1:20] #>  [1] 0.48 0.44 0.37 1.00 0.76 0.94 1.00 0.95 0.82 0.88 0.88 0.56 0.55 1.00 0.91 #> [16] 0.63 0.70 1.00 0.86 1.00"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Qing . Author. Mahlon Scott. Author. Hsin-Hsiung Huang. Author, maintainer.","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Q, Scott M, Huang H (2025). ZINB.GP: Zero Inflated Negative Binomial model Using Gaussian Processes. R package version 0.0.1.0, https://kingjms1.github.io/NNGP_ZINB_R/.","code":"@Manual{,   title = {ZINB.GP: Zero Inflated Negative Binomial model Using Gaussian Processes},   author = {Qing He and Mahlon Scott and Hsin-Hsiung Huang},   year = {2025},   note = {R package version 0.0.1.0},   url = {https://kingjms1.github.io/NNGP_ZINB_R/}, }"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/index.html","id":"zinb-nngp-bayesian-model","dir":"","previous_headings":"","what":"Zero Inflated Negative Binomial model Using Gaussian Processes","title":"Zero Inflated Negative Binomial model Using Gaussian Processes","text":"package implements model described “Framework Zero-Inflated Bayesian Negative Binomial Regression Models Spatiotemporal Data” Qing Hsin-Hsiung Huang (2023). https://doi.org/10.1016/j.jspi.2023.106098. package work progress, feel free create issue suggestions notice problems.","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation Instructions","title":"Zero Inflated Negative Binomial model Using Gaussian Processes","text":"Install devtools R package, run following command","code":"install.packages(c(\"BayesLogit\", \"FastGP\", \"LaplacesDemon\", \"MASS\", \"Matrix\", \"msm\", \"mvtnorm\", \"spNNGP\")) devtools::install_github(\"KingJMS1/NNGP_ZINB_R\")"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/index.html","id":"example-use","dir":"","previous_headings":"","what":"Example Use","title":"Zero Inflated Negative Binomial model Using Gaussian Processes","text":"Detailed examples full code can found vignettes folder, following link articles: https://kingjms1.github.io/NNGP_ZINB_R/ Given , predictions can found via:","code":"X       Other Predictor variables y       Zero inflated count response coords  Spatial coordinates for NNGP Vs      Spatially varying predictor variables         (e.g. one-hot indication of which location this is for varying intercept),         wrapped in sparseMatrix from Matrix R package.         Will be multiplied by the spatial random effects for prediction. Vt      Temporal varying predictor variables, wrapped in sparseMatrix from Matrix R package.         Will be multiplied by the temporal random effects for prediction. Ds      Spatial distance matrix, diagonal should be 0,         off diagonal is distance between elements i and j in space, inputs to the spatial NNGP kernel Dt      Temporal distance matirx, diagonal should be 0,         off diagonal is distance between elements i and j in time, inputs to the temporal GP kernel M       How many neighbors to allow in the spatial NNGP algorithm, defaults to 10. nsim    How long to run MCMC in total, must be greater than burn. burn    How long to run MCMC before saving samples. library(ZINB.GP) output <- ZINB_NNGP(X, y, coords, Vs, Vt, Ds, Dt, M = M, nsim, burn, save_ypred = TRUE) predictions <- output$Y_pred"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/index.html","id":"api-reference","dir":"","previous_headings":"","what":"API Reference","title":"Zero Inflated Negative Binomial model Using Gaussian Processes","text":"API reference: https://kingjms1.github.io/NNGP_ZINB_R/reference/index.html","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/NNMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"NNMatrix — NNMatrix","title":"NNMatrix — NNMatrix","text":"Create neighbord matrix spNNGP","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/NNMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NNMatrix — NNMatrix","text":"","code":"NNMatrix(coords, n.neighbors, n.omp.threads = 2, search.type = \"brute\")"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/ZINB_NNGP.html","id":null,"dir":"Reference","previous_headings":"","what":"ZINB_NNGP — ZINB_NNGP","title":"ZINB_NNGP — ZINB_NNGP","text":"Run ZINB NNGP model described https://doi.org/10.1016/j.jspi.2023.106098.","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/ZINB_NNGP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ZINB_NNGP — ZINB_NNGP","text":"","code":"ZINB_NNGP(   X,   y,   coords,   Vs,   Vt,   Ds,   Dt,   M = 10,   nsim,   burn,   thin = 1,   save_ypred = FALSE,   print_iter = 100,   print_progress = FALSE )"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/ZINB_NNGP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ZINB_NNGP — ZINB_NNGP","text":"X Predictor variables y Zero inflated count response coords Spatial coordinates NNGP Vs Spatially varying predictor variables (e.g. one-hot indication location varying intercept), wrapped sparseMatrix Matrix R package. multiplied spatial random effects prediction. Vt Temporal varying predictor variables, wrapped sparseMatrix Matrix R package. multiplied temporal random effects prediction. Ds Spatial distance matrix, diagonal 0, diagonal distance elements j space, inputs spatial NNGP kernel Dt Temporal distance matirx, diagonal 0, diagonal distance elements j time, inputs temporal GP kernel M many neighbors allow spatial NNGP algorithm, defaults 10. nsim long run MCMC total, must greater burn. burn long run MCMC saving samples. thin often save MCMC samples, default 1, saves every iteration. save_ypred Whether output predicted values every iteration print_iter often print iteration number MCMC chain. print_progress Whether print iteration number MCMC chain.","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/ZINB_NNGP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ZINB_NNGP — ZINB_NNGP","text":"List following sampled values: Alpha:  Model coefficients logit model Beta:  Model coefficients NB model :  Portion spatial random effect logit model explained kernel B:  Portion temporal random effect logit model explained kernel C:  Portion spatial random effect NB model explained kernel D:  Portion temporal random effect NB model explained kernel Eps1s:  Portion spatial random effect logit model explained noise Eps2s:  Portion spatial random effect NB model explained noise Eps1t:  Portion temporal random effect logit model explained noise Eps2t:  Portion temporal random effect NB model explained noise L1t:  Length scale temporal kernel logit model, .e.  \\(e^{-\\frac{d^{2}}{2 l_{1t}^{2}}}\\) Sigma1t:  Kernel scale parameter kernel, .e.  \\(\\sigma_{1t}^{2}e^{.}\\) L2t:  Length scale temporal kernel NB model, .e.  \\(e^{-\\frac{d^{2}}{2 l_{1t}^{2}}}\\) Sigma2t:  Kernel scale parameter kernel, .e.  \\(\\sigma_{2t}^{2}e^{.}\\) Phi_bin:  Length scale spatial kernel logit model, .e.  \\(e^{-\\Phi_{bin}d^{2}}\\) Sigma1s:  Square root multiplier spatial kernel logit model Phi_nb:  Length scale spatial kernel NB model, .e.  \\(e^{-\\Phi_{nb}d^{2}}\\) Sigma2s:  Square root multiplier spatial kernel NB model Sigma_eps1s:  Estimated Standard deviation eps1s Sigma_eps2s:  Estimated Standard deviation eps2s Sigma_eps1t:  Estimated Standard deviation eps1t Sigma_eps2t:  Estimated Standard deviation eps2t R:  Dispersion parameter Negative Binomial distribution. at_risk:  risk indicator observation Y_pred:  Predictions, sampled posterior distribution iteration, NULL save_ypred false","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"estimate — estimate","title":"estimate — estimate","text":"Draw y posterior distribution","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"estimate — estimate","text":"","code":"estimate(X, alpha, beta, Vs, Vt, a, b, c, d, eps1s, eps1t, eps2s, eps2t, r)"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/getAD.html","id":null,"dir":"Reference","previous_headings":"","what":"getAD — getAD","title":"getAD — getAD","text":"getAD","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/getAD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getAD — getAD","text":"","code":"getAD(neardist, neardistM, N, M, phi)"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/get_NN_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"get_NN_dist — get_NN_dist","title":"get_NN_dist — get_NN_dist","text":"get_NN_dist","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/get_NN_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_NN_dist — get_NN_dist","text":"","code":"get_NN_dist(ind, ind_distM_d, M)"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/get_NN_distM.html","id":null,"dir":"Reference","previous_headings":"","what":"get_NN_distM — get_NN_distM","title":"get_NN_distM — get_NN_distM","text":"get_NN_distM","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/get_NN_distM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_NN_distM — get_NN_distM","text":"","code":"get_NN_distM(ind, ind_distM_d, M)"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/get_NN_ind.html","id":null,"dir":"Reference","previous_headings":"","what":"get_NN_ind — get_NN_ind","title":"get_NN_ind — get_NN_ind","text":"get_NN_ind","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/get_NN_ind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_NN_ind — get_NN_ind","text":"","code":"get_NN_ind(ind, ind_distM_i, M)"},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/i_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"i_dist — i_dist","title":"i_dist — i_dist","text":"distance matrix location neighbors","code":""},{"path":"https://kingjms1.github.io/NNGP_ZINB_R/reference/i_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"i_dist — i_dist","text":"","code":"i_dist(i, neighbor_index, s)"}]
